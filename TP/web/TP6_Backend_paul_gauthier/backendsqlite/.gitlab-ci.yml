# Job pour exposer l'API sur Scalingo
# URL d'exposition de l'API : https://monAppliChezScalingo.osc-fr1.scalingo.io/
scalingo:
    stage: deploy
    tags:
        - docker
    variables:
        # SCALINGO_API_TOKEN # variable à ne pas définir en clair ici (cf instructions à la fin du .gitlab-ci.yml ci-dessous)
        SCALINGO_APP_NAME: backendtpimag # le nom de votre appli chez scalingo
        SCALINGO_REGION: osc-fr1 # l'instance de scalingo sur laquelle votre appli est déployée
        GIT_DEPTH: 0
        PROJECT_DIR: backendsqlite # Le répertoire dans le dépôt où est le backend
    image: ruby:3.1.3 # car dpl est codé en Ruby
    script:
        - gem install dpl --pre # gem est le gestionnaire de paquets pour Ruby
        - curl -O https://cli-dl.scalingo.com/install && bash install # scalingo CLI est installé
        - scalingo --app=$SCALINGO_APP_NAME env-set PROJECT_DIR=$PROJECT_DIR # Pour indiquer sur le dépôt distant où est le backend (s'il est à la racine du projet ceci est facultatif, et il est possible de le faire une fois pour toute directement dans l'interface web de scalingo)
        - dpl --provider=scalingo --app=$SCALINGO_APP_NAME --api-token=$SCALINGO_API_TOKEN --region=$SCALINGO_REGION --branch=refs/heads/main
        # la variable SCALINGO_API_TOKEN contient le token que vous avez généré chez scalingo via le menu `User Settings > API tokens`
        #
        # Afin que la variable SCALINGO_API_TOKEN n'apparaissent pas en clair sur notre dépôt public gitlab, on définit cette variable via
        # le menu `Settings > CI/CD > Variables` et on la masque dans le résultat des logs des jobs en lui appliquant la propriété "Masked"
        # Plus de détails sur https://docs.gitlab.com/ee/ci/variables/index.html.

# Run node tests
node:
    stage: test
    tags:
        - node
    script:
        - npm run updatedb # update db for tests
        - npm run test # run tests
        - npm run updatedb # reinit db

# Run sonar tests
stages:
    - sonarqube-check
    - sonarqube-vulnerability-report

sonarqube-check:
    stage: sonarqube-check
    image:
        name: sonarsource/sonar-scanner-cli:5.0
        entrypoint: [""]
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
        GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - sonar-scanner
    allow_failure: true
    only:
        - merge_requests
        - master
        - main
        - develop

sonarqube-vulnerability-report:
    stage: sonarqube-vulnerability-report
    script:
        - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=TP6_BACKEND_PAUL_GAUTHIER&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
    allow_failure: true
    only:
        - merge_requests
        - master
        - main
        - develop
    artifacts:
        expire_in: 1 day
        reports:
            sast: gl-sast-sonar-report.json
    dependencies:
        - sonarqube-check

# Semgrep analyse
stages:
  - security-report
semgrep-security-report:
  stage: security-report
  image: returntocorp/semgrep
  script:
    - apk add gawk
    - pip3 install anybadge
    # Voir https://semgrep.dev/r pour la sélection des types d'analyse
    - 'semgrep --config "p/default" --config  "r/javascript" --config  "r/html" --config "r/css" --gitlab-sast -o gl-sast-semgrep-report.json  .'
    - BADGES="javascript html dockerfile"
    # et https://github.com/returntocorp/semgrep-rules/tree/develop
    - 'for b in $BADGES; do semgrep --config "r/${b}" -o "semgrep_${b}.report.txt" .;done'
    - "for b in $BADGES; do SCORE=$(gawk 'match($0,/([0-9]+) Code Finding/,a){print a[1]}' semgrep_${b}.report.txt);echo $SCORE;anybadge -l $b -v _${SCORE} > $b.badge.svg;done"
  allow_failure: true
  artifacts:
    reports:
      sast: gl-sast-semgrep-report.json
    paths:
      - "*.report.txt"
      - "*.badge.svg"
      - gl-sast-semgrep-report.json